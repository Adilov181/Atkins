# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R2HTrNcXDRJtOYLEDSTNhHPvG0W8wdst
"""

import streamlit as st
import speech_recognition as sr
from transformers import pipeline
from textblob import TextBlob
# Initialize the sentiment analysis pipeline
sentiment_analysis = pipeline("sentiment-analysis")
# Function to transcribe audio
def transcribe_audio(file):
    recognizer = sr.Recognizer()
    with sr.AudioFile(file) as source:
        audio = recognizer.record(source)
    try:
        return recognizer.recognize_google(audio)
    except sr.UnknownValueError:
        return "Could not understand audio"
    except sr.RequestError:
        return "Request error from Google Speech Recognition service"
# Function to analyze sentiment
def analyze_sentiment(text):
    analysis = sentiment_analysis(text)
    return analysis
# Function to suggest improvements
def suggest_improvements(sentiment, text):
    suggestions = []
    if sentiment == 'POSITIVE':
        suggestions.append("Consider highlighting these positive aspects in your marketing.")
    elif sentiment == 'NEGATIVE':
        if 'delay' in text.lower():
            suggestions.append("Look into improving project timelines and communication.")
        if 'cost' in text.lower():
            suggestions.append("Explore options for cost reduction or provide better budgeting information.")
        # Add more conditions as necessary
    return suggestions
# Streamlit interface
st.title("Audio Sentiment Analysis for Construction Companies")
st.write("Upload an audio file to get sentiment analysis and suggestions for improvement.")
uploaded_file = st.file_uploader("Choose an audio file", type=["wav", "mp3"])
if uploaded_file is not None:
    st.audio(uploaded_file, format='audio/wav')
    st.write("Transcribing...")
    transcript = transcribe_audio(uploaded_file)
    st.write("Transcript:", transcript)
if transcript and transcript not in ["Could not understand audio", "Request error from Google Speech Recognition service"]:
        st.write("Analyzing sentiment...")
        sentiment = analyze_sentiment(transcript)
        st.write("Sentiment:", sentiment[0]['label'], "with score", sentiment[0]['score'])

        st.write("Suggestions for Improvement:")
        suggestions = suggest_improvements(sentiment[0]['label'], transcript)
        for suggestion in suggestions:
            st.write("-", suggestion)
    else:
        st.write("Error in transcription:", transcript)
